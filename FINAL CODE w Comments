#include <Wire.h>
// A4 = SDA,A5 = SCL

#define PIN_SCE   7

#define PIN_RESET 6

#define PIN_DC    5

#define PIN_SDIN  11

#define PIN_SCLK  13


#define LCD_C     LOW

#define LCD_D     HIGH


#define LCD_X     84

#define LCD_Y     48


static const byte ASCII[][5] =

{

 {0x00, 0x00, 0x00, 0x00, 0x00} // 20  

,{0x00, 0x00, 0x5f, 0x00, 0x00} // 21 !

,{0x00, 0x07, 0x00, 0x07, 0x00} // 22 "

,{0x14, 0x7f, 0x14, 0x7f, 0x14} // 23 #

,{0x24, 0x2a, 0x7f, 0x2a, 0x12} // 24 $

,{0x23, 0x13, 0x08, 0x64, 0x62} // 25 %

,{0x36, 0x49, 0x55, 0x22, 0x50} // 26 &

,{0x00, 0x05, 0x03, 0x00, 0x00} // 27 '

,{0x00, 0x1c, 0x22, 0x41, 0x00} // 28 (

,{0x00, 0x41, 0x22, 0x1c, 0x00} // 29 )

,{0x14, 0x08, 0x3e, 0x08, 0x14} // 2a *

,{0x08, 0x08, 0x3e, 0x08, 0x08} // 2b +

,{0x00, 0x50, 0x30, 0x00, 0x00} // 2c ,

,{0x08, 0x08, 0x08, 0x08, 0x08} // 2d -

,{0x00, 0x60, 0x60, 0x00, 0x00} // 2e .

,{0x20, 0x10, 0x08, 0x04, 0x02} // 2f /

,{0x3e, 0x51, 0x49, 0x45, 0x3e} // 30 0

,{0x00, 0x42, 0x7f, 0x40, 0x00} // 31 1

,{0x42, 0x61, 0x51, 0x49, 0x46} // 32 2

,{0x21, 0x41, 0x45, 0x4b, 0x31} // 33 3

,{0x18, 0x14, 0x12, 0x7f, 0x10} // 34 4

,{0x27, 0x45, 0x45, 0x45, 0x39} // 35 5

,{0x3c, 0x4a, 0x49, 0x49, 0x30} // 36 6

,{0x01, 0x71, 0x09, 0x05, 0x03} // 37 7

,{0x36, 0x49, 0x49, 0x49, 0x36} // 38 8

,{0x06, 0x49, 0x49, 0x29, 0x1e} // 39 9

,{0x00, 0x36, 0x36, 0x00, 0x00} // 3a :

,{0x00, 0x56, 0x36, 0x00, 0x00} // 3b ;

,{0x08, 0x14, 0x22, 0x41, 0x00} // 3c <

,{0x14, 0x14, 0x14, 0x14, 0x14} // 3d =

,{0x00, 0x41, 0x22, 0x14, 0x08} // 3e >

,{0x02, 0x01, 0x51, 0x09, 0x06} // 3f ?

,{0x32, 0x49, 0x79, 0x41, 0x3e} // 40 @

,{0x7e, 0x11, 0x11, 0x11, 0x7e} // 41 A

,{0x7f, 0x49, 0x49, 0x49, 0x36} // 42 B

,{0x3e, 0x41, 0x41, 0x41, 0x22} // 43 C

,{0x7f, 0x41, 0x41, 0x22, 0x1c} // 44 D

,{0x7f, 0x49, 0x49, 0x49, 0x41} // 45 E

,{0x7f, 0x09, 0x09, 0x09, 0x01} // 46 F

,{0x3e, 0x41, 0x49, 0x49, 0x7a} // 47 G

,{0x7f, 0x08, 0x08, 0x08, 0x7f} // 48 H

,{0x00, 0x41, 0x7f, 0x41, 0x00} // 49 I

,{0x20, 0x40, 0x41, 0x3f, 0x01} // 4a J

,{0x7f, 0x08, 0x14, 0x22, 0x41} // 4b K

,{0x7f, 0x40, 0x40, 0x40, 0x40} // 4c L

,{0x7f, 0x02, 0x0c, 0x02, 0x7f} // 4d M

,{0x7f, 0x04, 0x08, 0x10, 0x7f} // 4e N

,{0x3e, 0x41, 0x41, 0x41, 0x3e} // 4f O

,{0x7f, 0x09, 0x09, 0x09, 0x06} // 50 P

,{0x3e, 0x41, 0x51, 0x21, 0x5e} // 51 Q

,{0x7f, 0x09, 0x19, 0x29, 0x46} // 52 R

,{0x46, 0x49, 0x49, 0x49, 0x31} // 53 S

,{0x01, 0x01, 0x7f, 0x01, 0x01} // 54 T

,{0x3f, 0x40, 0x40, 0x40, 0x3f} // 55 U

,{0x1f, 0x20, 0x40, 0x20, 0x1f} // 56 V

,{0x3f, 0x40, 0x38, 0x40, 0x3f} // 57 W

,{0x63, 0x14, 0x08, 0x14, 0x63} // 58 X

,{0x07, 0x08, 0x70, 0x08, 0x07} // 59 Y

,{0x61, 0x51, 0x49, 0x45, 0x43} // 5a Z

,{0x00, 0x7f, 0x41, 0x41, 0x00} // 5b [

,{0x02, 0x04, 0x08, 0x10, 0x20} // 5c ¥

,{0x00, 0x41, 0x41, 0x7f, 0x00} // 5d ]

,{0x04, 0x02, 0x01, 0x02, 0x04} // 5e ^

,{0x40, 0x40, 0x40, 0x40, 0x40} // 5f _

,{0x00, 0x01, 0x02, 0x04, 0x00} // 60 `

,{0x20, 0x54, 0x54, 0x54, 0x78} // 61 a

,{0x7f, 0x48, 0x44, 0x44, 0x38} // 62 b

,{0x38, 0x44, 0x44, 0x44, 0x20} // 63 c

,{0x38, 0x44, 0x44, 0x48, 0x7f} // 64 d

,{0x38, 0x54, 0x54, 0x54, 0x18} // 65 e

,{0x08, 0x7e, 0x09, 0x01, 0x02} // 66 f

,{0x0c, 0x52, 0x52, 0x52, 0x3e} // 67 g

,{0x7f, 0x08, 0x04, 0x04, 0x78} // 68 h

,{0x00, 0x44, 0x7d, 0x40, 0x00} // 69 i

,{0x20, 0x40, 0x44, 0x3d, 0x00} // 6a j 

,{0x7f, 0x10, 0x28, 0x44, 0x00} // 6b k

,{0x00, 0x41, 0x7f, 0x40, 0x00} // 6c l

,{0x7c, 0x04, 0x18, 0x04, 0x78} // 6d m

,{0x7c, 0x08, 0x04, 0x04, 0x78} // 6e n

,{0x38, 0x44, 0x44, 0x44, 0x38} // 6f o

,{0x7c, 0x14, 0x14, 0x14, 0x08} // 70 p

,{0x08, 0x14, 0x14, 0x18, 0x7c} // 71 q

,{0x7c, 0x08, 0x04, 0x04, 0x08} // 72 r

,{0x48, 0x54, 0x54, 0x54, 0x20} // 73 s

,{0x04, 0x3f, 0x44, 0x40, 0x20} // 74 t

,{0x3c, 0x40, 0x40, 0x20, 0x7c} // 75 u

,{0x1c, 0x20, 0x40, 0x20, 0x1c} // 76 v

,{0x3c, 0x40, 0x30, 0x40, 0x3c} // 77 w

,{0x44, 0x28, 0x10, 0x28, 0x44} // 78 x

,{0x0c, 0x50, 0x50, 0x50, 0x3c} // 79 y

,{0x44, 0x64, 0x54, 0x4c, 0x44} // 7a z

,{0x00, 0x08, 0x36, 0x41, 0x00} // 7b {

,{0x00, 0x00, 0x7f, 0x00, 0x00} // 7c |

,{0x00, 0x41, 0x36, 0x08, 0x00} // 7d }

,{0x10, 0x08, 0x08, 0x10, 0x08} // 7e ←

,{0x78, 0x46, 0x41, 0x46, 0x78} // 7f →

};

void LcdCharacter(char character)

{

  LcdWrite(LCD_D, 0x00);

  for (int index = 0; index < 5; index++)

  {

    LcdWrite(LCD_D, ASCII[character - 0x20][index]);

  }

  LcdWrite(LCD_D, 0x00);

}



void gotoXY(int x, int y)

{

  LcdWrite( 0, 0x80 | x);  // Column.

  LcdWrite( 0, 0x40 | y);  // Row.  


}


void LcdClear(void)

{

  for (int index = 0; index < LCD_X * LCD_Y / 8; index++)

  {

    LcdWrite(LCD_D, 0x00);

  }

  gotoXY(0,0);

}


void LcdInitialise(void)

{

  pinMode(PIN_SCE, OUTPUT);

  pinMode(PIN_RESET, OUTPUT);

  pinMode(PIN_DC, OUTPUT);

  pinMode(PIN_SDIN, OUTPUT);

  pinMode(PIN_SCLK, OUTPUT);

  digitalWrite(PIN_RESET, LOW);

  digitalWrite(PIN_RESET, HIGH);

  LcdWrite(LCD_C, 0x21 );  // LCD Extended Commands.

  LcdWrite(LCD_C, 0xB9 );  // Set LCD Vop (Contrast). 

  LcdWrite(LCD_C, 0x04 );  // Set Temp coefficent. //0x04

  LcdWrite(LCD_C, 0x14 );  // LCD bias mode 1:48. //0x13

  LcdWrite(LCD_C, 0x0C );  // LCD in normal mode.

  LcdWrite(LCD_C, 0x20 );

  LcdWrite(LCD_C, 0x0C );

}


void LcdString(char *characters)

{

  while (*characters)

  {

    LcdCharacter(*characters++);

  }

}


void LcdWrite(byte dc, byte data)

{

  digitalWrite(PIN_DC, dc);

  digitalWrite(PIN_SCE, LOW);

  shiftOut(PIN_SDIN, PIN_SCLK, MSBFIRST, data);

  digitalWrite(PIN_SCE, HIGH);

}



//DateTime now;
int adc_key_in = 0;
int lastDay = 0;
int lastMonth = 0;
int lastYear = 0;
int lastHour = 0;
int lastMinute = 0;
int movementTimer = 0;
int menuOptions = 3;
int menuOption = 0;
int alarmHours = 0;
int alarmMinutes = 0;
bool alarmPM = 0;
bool alarmSet = 0;
bool backLightOn = 1;
// Fixed default day and hour settings on set date/time
bool resetClock = false;
// define constants
const int backLight = 10; 
const int pirPin = 16;//A2
#define btnRIGHT  0
#define btnUP     1
#define btnDOWN   2
#define btnLEFT   3
#define btnSELECT 4
#define btnNONE   5
#define beeper A1
#define shortBeep 100
#define longBeep  500

void setup () {
  LcdInitialise();
  LcdClear();
  Wire.begin();
  }
void loop () {
  //now = RTC.now();
  digitalClockDisplay( ); // update clock
  movementTimer++;
  if (movementTimer > 30) //turn off backlight after 30 cycles
  {
    digitalWrite(backLight, LOW); // turn backlight off
    movementTimer = 0;
  }
  for (int i = 0; i < 10000; i++)
  {
    button_loop(); //check for button pushed
    int val = digitalRead(pirPin); //read motion sensor
    if (val == HIGH)
    {
      //sense movement?
      digitalWrite(backLight, HIGH); // turn backlight on
      movementTimer = 0;
    }
  }
}
void printDigits(byte digits)
{
  // utility function for digital clock display: prints preceding colon and leading 0
  LcdString(":");
  if(digits < 10)
    LcdString("0");
  LcdWrite(digits,DEC);
}
void digitalClockDisplay()
{
  bool clockPM = 0;
  // Fixed default day and hour settings on set date/time
  if (now.day() != lastDay || resetClock == true)
  {
    lcd.begin(16,2);
    gotoXY(3,0);
    if(now.month() < 10)
      LcdString('0');
    LcdString(now.month(), DEC);
    LcdString("/");
    if(now.day() < 10)
      LcdString('0');
    LcdString(now.day(), DEC);
    LcdString("/");
    int thisYear = now.year();
    LcdString(thisYear, DEC);
  }
  // Fixed default day and hour settings on set date/time
  if (now.minute() != lastMinute || resetClock == true)
  {
    if(now.hour() < 10)
      gotoXY(5,1);
    gotoXY(4,1);
    // Fixed noon showing as 12am
    //    if(now.hour() > 12)
    if(now.hour() > 11)
    {
      // Fixed noon showing as 0:00pm
      if (now.hour() == 12)
      {
        LcdString(now.hour(), DEC);
      }
      else{
        LcdString(now.hour()-12, DEC);
      }
      printDigits(now.minute());
      clockPM = true;
      // Fixed displaying PMM; added space after "PM"
      LcdString(" PM "); 
      // Added alarm set indicator
      if (alarmSet)
        LcdString("*");
    }
    else
    {
      // Added a loop to make sure the right time of the day is shown.
      LcdString(now.hour(), DEC);
      printDigits(now.minute());
      clockPM = false;      
      LcdString(" AM ");
      // Added alarm set indicator
      if (alarmSet)
        LcdString("*");      
    }
  }
  // Fixed default day and hour settings on set date/time
  resetClock = false;
  lastDay = now.day();
  lastMonth = now.month();
  lastYear = now.year();
  lastHour = now.hour();
  lastMinute = now.minute();
  //check for alarm
  if (alarmSet)
  {
    // Fixed alarm set PM
    if (alarmHours == lastHour && alarmMinutes == lastMinute)
    {
      //sound alarm
      setOffAlarm();
    } 
  }
}
void button_loop()
{
  int button = read_LCD_buttons();
  if (button == btnSELECT)
  {
    timedBeep(shortBeep,1); 
    selectMenu();
  }
}
void selectMenu()
{
  int button = 0; 
  menuOption = 1;
  lcdClear();
  LcdString("Minute Timer");  
  while (menuOption <= menuOptions)
  {
    button = read_LCD_buttons();
    if (button == btnSELECT)
    {
      timedBeep(shortBeep,1);   
      menuOption++;
      if (menuOption == 2)
      {
        lcdClear();
        // Added clearAlarm feature
        LcdString("Set/Clear Alarm");            
      }
      if (menuOption == 3)
      {
        lcdClear();
        LcdString("Set Date/Time");            
      }
    } 
    if (button == btnLEFT)
    {
      if (menuOption == 1)
      {
        timedBeep(shortBeep,1);
        minuteTimer();
        return;
      }
      if (menuOption == 2)
      {
        timedBeep(shortBeep,1);
        // Added clearAlarm feature
        //check for existing alarm
        if (alarmSet)
        {
          clearAlarm();
        }
        else
        {
          setAlarm();
        }
        return;
      }
      if (menuOption == 3)
      {
        timedBeep(shortBeep,1);
        // Added setDateTime feature
        setDateTime();
        return;
      } 
    }
  }
}  
// Added clearAlarm feature
void clearAlarm()
{
  int button = 0;
  bool clearIt = true;
  char *ampm = "AM";
  lcdClear();
  LcdString("Alarm Set For");
  gotoXY(0,1);
  LcdString(alarmHours);   
  LcdString(":");
  LcdString(alarmMinutes);
  LcdString(" ");
  if (alarmPM == 1)
    ampm = "PM";
  LcdString(ampm);
  delay(2000);
  lcdClear();
  LcdWrite("Clear Alarm?");
  gotoXY(0,1);
  LcdString("Yes");  
  while (button != btnSELECT)
  {
    button = read_LCD_buttons();
    if (button == btnUP)
    {
      timedBeep(shortBeep,1);
      clearIt = !clearIt;
    }
    if (button == btnDOWN)
    {
      timedBeep(shortBeep,1);
      clearIt = !clearIt;
    }
    if (button == btnRIGHT)
    {
      timedBeep(shortBeep,1);
      alarmSet = !clearIt;
      if (clearIt)
      {
        lcdClear();
        timedBeep(shortBeep,2);
        LcdString("Alarm Cleared!");
        delay(2000);
      }
      return; 
    }
    gotoXY(0,1);
    if (clearIt)
    {
      LcdString("Yes"); 
    }
    else{
      LcdString("No ");
    }
  }   
}
void minuteTimer()
{
  // Pass maxCount to getTimerMinutes
  int timerMinutes = getTimerMinutes("Set Minutes", 0, 60);
  if (timerMinutes > 0)
  {
    timedCountDown(timerMinutes*60, "Minute Timer");
  }
  else
  {
    timerCancelled("Timer");       
  }
  return;
}
void setAlarm()
{
  int button = 0;
  char *ampm = "AM";
  // Pass maxCount to getTimerMinutes
  alarmHours = getTimerMinutes("Set Alarm Hour", alarmHours, 12);  
  // Validate alarm hours > 0 and < 13
  if (alarmHours > 0 && alarmHours < 13)
  {
    // Pass maxCount to getTimerMinutes
    alarmMinutes = getTimerMinutes("Set Minutes", alarmMinutes, 59);
    // Fixed allow alarm minutes to be 0
    //if (alarmMinutes > 0)
    if (alarmMinutes < 60)
    {
      lcdClear();
      LcdString("Toggle AM/PM");
      gotoXY(0,1);
      //display alarm time
      LcdString(alarmHours);       
      LcdString(":");
      if (alarmMinutes < 10)
        LcdString("0");
      LcdString(alarmMinutes);
      gotoXY(6,1);
      LcdString(ampm);
      //get AM/PM
      button = 6;
      while (button != btnSELECT && button != btnRIGHT)
      {
        button = read_LCD_buttons();
        if (button == btnUP || button == btnDOWN)
        {
          timedBeep(shortBeep,1);
          if (ampm == "AM")
          {
            ampm = "PM";
          }
          else
          {
            ampm = "AM";
          }
          gotoXY(6,1);
          LcdString(ampm);  
        }
      }
      if (button == btnRIGHT)
      {
        timedBeep(shortBeep,1);
        alarmSet = true; 
        // Fixed alarm set PM
        if (ampm == "PM") alarmHours += 12;        
        gotoXY(0,0);
        LcdString("Alarm Set for");
        delay(1000);
        return;       
      }
      else
      {
        timerCancelled("Alarm");
        return;  
      }   
    }
    else
    {
      timerCancelled("Alarm");     
    }    
  }     
  else
  {
    timerCancelled("Alarm");       
  }
}
// Added setDateTime feature
void setDateTime()
{
  int button = 0;
  char *ampm = "AM";
  //get month
  // Pass maxCount to getTimerMinutes
  int setMonth = getTimerMinutes("Set Month", lastMonth, 12);
  if (setMonth > 0 && setMonth < 13)
  {
    //get day
    // Fixed default day and hour settings on set date/time
    // Pass maxCount to getTimerMinutes
    int setDay = getTimerMinutes("Set Day", lastDay, 31);
    if (setDay > 0 && setDay < 32)
    {
      //get year
      // Pass maxCount to getTimerMinutes
      int setYear = getTimerMinutes("Set Year", lastYear, 2999);
      if (setYear > 2000 && setYear < 3000)
      {
        //get hour
        int thisHour = lastHour;
        // Fixed default day and hour settings on set date/time
        if (thisHour > 12) 
        {
          thisHour -= 12;
          ampm = "PM";
        }
        // Pass maxCount to getTimerMinutes
        int setHour = getTimerMinutes("Set Hour", thisHour, 12);
        if (setHour > 0 && setHour < 13)
        {
          //get minutes
          // Fixed default day and hour settings on set date/time
          // Pass maxCount to getTimerMinutes
          int setMinute = getTimerMinutes("Set Minute", lastMinute, 59);
          if (setMinute < 60)
          {
            //get ampm
            lcdClear();
            LcdString("Toggle AM/PM");
            gotoXY(0,1);
            //display alarm time
            LcdString(setHour);       
            LcdString(":");
            if (setMinute < 10)
              LcdString("0");
            LcdString(setMinute);
            gotoXY(6,1);
            LcdString(ampm);
            //get AM/PM
            button = 6;
            while (button != btnSELECT && button != btnRIGHT)
            {
              button = read_LCD_buttons();
              if (button == btnUP || button == btnDOWN)
              {
                timedBeep(shortBeep,1);
                if (ampm == "AM")
                {
                  ampm = "PM";
                }
                else
                {
                  ampm = "AM";
                }
                gotoXY(6,1);
                LcdString(ampm);         
              }
            }
            if (button == btnRIGHT)
            {
              timedBeep(shortBeep,1);
              if (ampm == "PM")
                setHour = setHour + 12;
              RTC.adjust(DateTime(setYear,setMonth,setDay,setHour,setMinute));
              gotoXY(0,0);
              // Fixed default day and hour settings on set date/time
              LcdString("Saving...     ");
              delay(1000);
              return;       
            }
            else
            {
              timerCancelled("");
              return;  
            }  
          }
          else
          {
            timerCancelled("");     
          }    
        }     
        else
        {
          timerCancelled("");       
        }
      }
      else
      {
        timerCancelled("");     
      }    
    }     
    else
    {
      timerCancelled("");       
    }
  }
  else
  {
    timerCancelled("");       
  }
}
// read the buttons
int read_LCD_buttons()
{
  adc_key_in = analogRead(0);      // read the value from the sensor
  // my buttons when read are centered at these valies: 0, 144, 329, 504, 741
  // we add approx 50 to those values and check to see if we are close
  if (adc_key_in > 1000) return btnNONE; // We make this the 1st option for speed reasons since it will be the most likely result
  if (adc_key_in < 50)   return btnRIGHT; 
  if (adc_key_in < 195)  return btnUP;
  if (adc_key_in < 380)  return btnDOWN;
  if (adc_key_in < 555)  return btnLEFT;
  if (adc_key_in < 790)  return btnSELECT;  
  return btnNONE;  // when all others fail, return this...
}
void timedCountDown(int secondCount, char countLabel[])
{
  long seconds = 0;
  long minutes = 0; 
  lcdClear();
  LcdString(countLabel);
  for (int i = secondCount; i >= 0; i--)
  {
    seconds = i;
    minutes = i / 60;
    if (minutes > 0)
    {
      seconds = seconds - (minutes * 60);  
    }     
    if (minutes > 0)
    {
      gotoXY(0,1);
      LcdString(minutes);
      LcdString(" min ");
    }
    else
    {
      (0,1);
    }
    if (seconds < 10) LcdWrite("0");
    LcdString(seconds);
    LcdString(" sec remaining");
    if (seconds > 0) delay(1000); 
    if (read_LCD_buttons() == btnSELECT) //cancel
    {
      timerCancelled("Timer");
      i = 0;
      return;
    }
  }
  lcd.setCursor(6,1);
  timedBeep(longBeep,3);
}
// Pass maxCount to getTimerMinutes
int getTimerMinutes(char timerText[], int startNum, int maxCount)
{
  int minutes = startNum;
  int button = 0;
  lcdClear();
  LcdString(timerText);
  lcd.setCursor(0,1);
  LcdString(minutes);   
  while (button != btnSELECT)
  {
    button = read_LCD_buttons();
    Serial.println(button);
    // Pass maxCount to getTimerMinutes
    if (button == btnLEFT)
    {
      if ((minutes + 10) <= maxCount)
      {
        timedBeep(shortBeep,1);
        minutes = minutes + 10;
      }
      else
      {
        timedBeep(shortBeep,2); 
      }
    }
    // Pass maxCount to getTimerMinutes
    if (button == btnUP)
    {
      if (minutes < maxCount)
      {
        timedBeep(shortBeep,1);
        minutes++;
      }
      else
      {
        timedBeep(shortBeep,2); 
      }
    }
    if (button == btnDOWN)
    {
      if (minutes > 0)
      {
        timedBeep(shortBeep,1);
        minutes--;
      }
      else
      {
        timedBeep(shortBeep,2); 
      }   
    } 
    if (button == btnRIGHT)
    {
      timedBeep(shortBeep,1);
      return minutes; 
    }
    lcd.setCursor(0,1);
    LcdString(minutes); 
    LcdString("   ");
  }
  return 0;
}
void timedBeep(int beepTime, int beepCount)
{
  for (int i = 0; i < beepCount; i ++)
  {
    digitalWrite(beeper, HIGH);
    delay(beepTime);
    digitalWrite(beeper, LOW);
    delay(beepTime);
  }
}
void timerCancelled(char message[])
{
  lcdClear();
  LcdString(message);
  LcdString(" Cancelled");
  timedBeep(shortBeep,3);    
}
void setOffAlarm()
{
  int button = 0;
  int i = 0;
  Serial.println(i);
  digitalWrite(backLight, HIGH); // turn backlight on
  while (button != btnSELECT)
  {
    button = read_LCD_buttons();
    lcdClear();
    i++;
    if (i > 50)
    {
      lcdClear();
      LcdString("Alert Alert");
      lcd.setCursor(0,1);
      LcdString("     Alert Alert");      
      i = 0;
      timedBeep(shortBeep,3);
    }
  }     
  timerCancelled("Alarm"); 
  alarmSet = false;  
}




